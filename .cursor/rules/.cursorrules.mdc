# AI-Creation 主规则文件（通用规范）

## 配置管理通用规范

### 禁止事项
- 在多个文件中重复定义相同的配置项
- 在业务逻辑中硬编码配置值
- 配置文件分散在多个目录中
- 使用多个同类型的配置文件
- 配置文件中包含业务逻辑或复杂计算
- 生成README.md、MIGRATION.md等说明文档
- 生成各种检查脚本、验证脚本、lint脚本等工具脚本
- 生成任何.md文件

### 必须事项
- 所有配置相关文件必须统一放在配置目录中（如 config/、src/config/ 等）
- 配置文件按功能分类，避免单个文件过大
- 使用统一的配置导出方式，避免循环引用
- 环境相关配置通过配置文件管理，提供合理的默认值
- 配置值使用适当的类型约束，确保类型安全
- 敏感信息通过环境变量注入，不在配置文件中硬编码
- 配置变更后需要重启相关服务

### 最佳实践
1. 集中管理：所有配置放在一个目录中
2. 分类组织：按功能或环境分类配置文件
3. 类型安全：使用强类型定义配置结构
4. 环境隔离：不同环境使用不同的配置文件

## 沟通与回复语言

### 必须事项
- 除非用户另有要求，助手在对话与代码评审中的自然语言回复一律使用简体中文。

## 通用代码质量规范

### 禁止事项
- 遗留 TODO 上线
- 魔法值直接出现在代码中
- 类超过 1000 行
- 方法体超过一屏
- 循环或 if 嵌套超过三层
- 无语义的变量名（如 a、b、str1、str2）
- 变量名与类型不匹配（如 Map 命名为 list）
- 变量名以 is、下划线或特殊字符开头（布尔以外）

### 必须事项
- 变量、方法、类、常量按规范命名（驼峰/大写下划线）
- 不同语义/业务代码之间空行分隔，避免连续空行
- if/else/for/while/do 必须使用大括号
- 复杂业务方法必须详细注释代码逻辑

## 版本控制与文档规范

### 禁止事项
- 提交包含调试代码或临时文件
- 提交信息使用无意义的描述
- 在代码中保留敏感信息（密码、密钥等）
- 生成不必要的文档文件
- 生成任何.md文件
- 生成README、CHANGELOG、API文档等markdown文档

### 必须事项
- 提交前进行代码审查
- 提交信息使用清晰的描述
- 敏感配置通过环境变量管理
- 代码变更需要相应的测试覆盖
description:
globs:
alwaysApply: false
---
